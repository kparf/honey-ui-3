{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport StoreContext from 'storeon/react/context';\nimport { initStore } from '../store';\n\nclass MyApp extends App {\n  static async getInitialProps(appContext) {\n    const isServer = true;\n    let store = initStore();\n    appContext.ctx.store = store;\n    const appProps = await App.getInitialProps(appContext);\n    return _objectSpread({}, appProps, {\n      isServer\n    });\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(StoreContext.Provider, {\n      value: initStore(pageProps.initData)\n    }, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}